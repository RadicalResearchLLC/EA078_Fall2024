# EJ - Drawing Polygons for Warehouse CENTRAL {#sec-EJPolygons}

::: {.callout-note appearance="simple"}
Today we will focus on the practice of creating polygons for use in a warehouse mapping visualization.
:::

The Tracy Earth Project and Catholic Charities - Stockton Diocese Environmental Justice Program contacted us to help them build a warehouse mapping tool. This lesson will involve some praxis for this class to help build that tool.

First, we'll use a praxis example from last semester to show you how to draw a polygon to overlay on a map (leaflet or ggplot). Then, you'll each be drawing some polygons for the San Joaquin County area.

## Project Example

PLACEHOLDER - we'll use a different example.

![Airport Gateway Land Use Plan](images/siteMap.png){#fig-siteMap}

## Cumulative Impacts

Today, I am going to ask you all to help with a cumulative impacts analysis (for the project. Under [CEQA Section 15355](https://ceqaportal.org/tp/AEP%20CEQA%20Portal_Cumulative%20Impacts.pdf), cumulative impacts are defined as 'two or more individual effects, when considered together, are considerable or which compound or increase other environmental impacts...The cumulative impact from several projects is the change in the environment which results from the incremental impact of the project when added to other closely related past, present, and reasonably foreseeable future projects.'

A cumulative impacts analysis identifies the past, present, and probable future projects that should be included in the EIR.

The [Warehouse CITY tool](https://radicalresearch.shinyapps.io/WarehouseCITY/) is designed to do exactly this. In Spring 2023, my class and helped to add dozens of planned warehouses to the existing warehouses map. This work helped us to add a layer of 'planned and approved warehouses to the tool allowing users to see what warehouses are likely to be built in the near future.

## Visualization - Drawing a Polygon

Note, this is a highly manual approach. There better ways to do this systematically and I've developed a tool to start doing that called  the [Polygon Export Tool](https://radicalresearch.shinyapps.io/PolygonExportTool/).  If we were really smart, we could do machine learning to figure out how to do this, but I have not taken the time to build a tool to more fully automate this process.

First, we always do the basics, then we'll show the tool and how it can simplify the process - assuming you know where to find files on your machine.

### Load libraries

```{r}
#| label: load libraries
#| warning: false
#| echo: true
#| output: false

library(sf)
library(leaflet)
```

### Manually Identify the Polygon Vertices.

Open [Google Maps](https://www.google.com/maps) or an equivalent mapping tool with satellite imagery and an ability to click on a location and retrieve a decimal degree location.

Find a vertex on the map - input longitude and latitude into a list in the form `c(lng, lat)`.

Do that for all the vertex points and bind them together as a list of lists as shown in the code below.

```{r}
#| label:  List of vertices for Airport Gateway Specific Plan
#| warning: false
#| echo: true

AirportGateway1 <- rbind(
                    c(-117.26095, 34.11023),
                    c(-117.26095, 34.10611),
                    c(-117.25946, 34.10484),
                    c(-117.24921, 34.10484),
                    c(-117.24455, 34.1069),
                    c(-117.22594, 34.1069),
                    c(-117.21669, 34.1069),
                    c(-117.21262, 34.1069),
                    c(-117.21248, 34.10476),
                    c(-117.20905, 34.10528),
                    c(-117.20532, 34.10613),
                    c(-117.1997, 34.10617),
                    c(-117.1998, 34.1116),
                    c(-117.20086, 34.11073),
                    c(-117.2117, 34.11074),
                    c(-117.21757, 34.109),
                    c(-117.21757, 34.11032),
                    c(-117.24932, 34.11012),
                    c(-117.24932, 34.10847),
                    c(-117.25412, 34.10847),
                    c(-117.25412, 34.11012),
                    c(-117.26095, 34.11023)
                    )
```

Look at the AirportGateway table - it looks like a list of point coordinates.

We need one more bit of code to convert that into a polygon. It is a bit complicated.

```{r}
#| label:  Convert list to polygon for Airport Gateway Specific Plan
#| warning: false
#| echo: true

AirportGatewaySP <- st_sf(
                      name = 'Airport Gateway Specific Plan Area', 
                      geom = st_sfc(st_polygon(list(AirportGateway1))), 
                      crs = 4326
                      )
```

The `name` is our label for the polygon, so that's easy. The `crs` is the coordinate reference system, in this case WGS84 = 4326 for easy display in `leaflet`.

The `geom` is the geometry. Three functions are applied - `list()` which converts the AirportGateway1 table to a list, `st_polygon()` which returns a polygon from a list of coordinates, and `st_sfc()` which verifies the contents and sets its class.

::: {.callout-note appearance="simple"}
Polygons always have to start and end with the same vertex to be a closed loop.
:::

Now we should display it to make sure it looks correct. @fig-AirportGatewayLeaflet shows the attempt.

```{r}
#| label: fig-AirportGatewayLeaflet 
#| fig-cap: Airport Gateway polygon check
#| echo: true

leaflet()  |>  
  addTiles() |> 
  addPolygons(data = AirportGatewaySP,
              color = 'darkred',
              fillOpacity = 0.6,
              weight = 1)
```

That looks pretty close.

Now let's add a warehouse layer showing all planned and approved warehouse projects within California that went through CEQA review from 2020-2024.

First import the warehouse dataset.  Let's name this dataset **plannedWH** or something to make it unique.

```{r}
#| echo: true
#| warning: false

plannedWH.url <- 'https://github.com/RadicalResearchLLC/CEQA_tracker/raw/main/CEQA_WH.geojson'
plannedWH <- st_read(plannedWH.url) |> 
  st_transform(crs = 4326) # crs = coordinate reference system and 4326 is WGS84

```

Now let's add the existing warehouses to the map. Let's also use `setView()` to zoom in on our area of interest cause San Bernardino County is really big.

@fig-finalWH

```{r}
#| label: fig-finalWH 
#| fig-cap: Airport Gateway project in bigger context with less busy map.
#| echo: true
#| eval: true

leaflet() |> 
  addTiles() |> 
  addProviderTiles(provider = providers$CartoDB.Positron) |> 
  addPolygons(data = AirportGatewaySP,
              color = 'darkred',
              fillOpacity = 0.6,
              weight = 1) |> 
  addPolygons(data = plannedWH,
              color = 'brown',
              weight = 1) |> 
  setView(lng = -117.34, lat = 34.10528, zoom = 11)
```

### In-Class Exercise

Placeholder

### Planned Warehouses Map for the Central Valley

[Warehouse CENTRAL](https://radicalresearch.shinyapps.io/WarehouseCENTRAL/)

I want to add warehouses for every other part of the Central Valley.  

We need to find land use and assessor parcel datasets for each of the counties and major cities in the Central Valley.

We have currently pulled in San Joaquin and Stanislaus Counties, and the cities of Tracy, Stockton, Lathrop, and Manteca.

In approximate order of importance, the counties that need to be targeted are Kern, Sacramento, Fresno, Madera, Tulare, Placer, and Yolo.  

Key cities to include are Sacramento, Fresno, Bakersfield, Modesto, Visalia, Merced, Woodland, West Sacramento,
