{
  "hash": "f0a29c83b002c2a040c2b650842f0796",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: live-html\nengine: knitr\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# Coding in R - Basics {#sec-coding1}\n\n::: {.callout-note appearance=\"simple\"}\nToday we will be focusing on the practice of data visualization.\n:::\n\nVisualization is a great place to start with R programming, because the payoff is relatively immediate. You get to make informative and potentially elegant visualizations to help you understand data.\n\nThe Tidyverse framework for visualization is shown in @fig-TidyverseFramework\n\n![Tidyverse](https://d33wubrfki0l68.cloudfront.net/795c039ba2520455d833b4034befc8cf360a70ba/558a5/diagrams/data-science-explore.png){#fig-TidyverseFramework}\n\n## Overview\n\n0. **Step 0** - [Install R and RStudio](http://radicalresearch.llc/EA078_Fall2024/tools.html) \n1. **Step 1 - Open RStudio **  \n  A. Put in a header comment - who, when, what, where  \n  B. Install key packages  \n  C. Load key packages  \n2. **Step 2 - Acquire and/or Load Data**  \n  A. Identify the `path` to the data   \n  B. Identify the data format  \n  C. Choose the _right_ function to load the data - go to _Step 1B_ and _1C_ again as needed\n  D. Write code to import the data  \n  E. Run the code to import the data  \n    i) Check for Error messages and warning messages in console; if failure, go back to _Step 2D_    \n    ii) Check to make sure data is loaded (look in `Environment` window)   \n  F. Step 2F - Look at the data - did it import correctly  \n    i) Check column headers  \n    ii) Check data types  \n  G. Repeat Step 2 as needed for any other data required for visualization    \n3. **Step 3 - Tidy the data** [Advanced data science](https://r4ds.had.co.nz/tidy-data.html) \n4. **Step 4 - Visualize the data**  \n  A. Choose the visualization type  \n  B. Choose the _right_ functions  \n  C. Write code to do a _basic_ visualization  \n  D. Add code to improve the visualization (repeat as needed)  \n  E. Annotate labels, axes, points, legends  \n  F. Export or publish the visualization  \n5. **Step 5 - Communicate with your audience using the visualization**\n  A. Get feedback from audience\n  B. Revise visualization (Step 4D as needed) to improve for intended audience\n\n## Example 1 - `mpg` dataset\n\n### Step 1 - Open RStudio; install and load packages\n\n#### A. Open RStudio \n\n\n\n\n::: {.cell .fig-column-margin}\n::: {.cell-output-display}\n![](https://user-images.githubusercontent.com/5993637/159347736-7e2e02d6-8d14-4b66-9ec0-659b090f2af2.png)\n:::\n:::\n\n\n\n\n::: {.callout-note appearance=\"warning\"}\nOpening RStudio loads R.  \nOpening R will not load RStudio.  \n:::\n\n@fig-annotated shows an annotated image of RStudio with the four panels labeled. In the default layout, the top-left is the _text editor panel_, the bottom-left is the _console panel_,\nthe top-right is the _files, plots, and packages panel_, and the bottom-right is the _environment panel_.  \n\n![annotated.RStudio](images/annotatedRstudio.png){#fig-annotated}\n\n* Text Editor Panel - This is where you can enter code and have the editor color code it.\n* Console Panel - This is where errors and warnings appear when you run code. It can also be used to do direct coding, which I don't recommend for beginners.\n* Files, plots, and packages panels - This is where files loaded in the working directory and packages in the default R directory are organized.\n* Environment Panel - This is where data and variables you define in your coding will be organized\n\n#### Add a Header\n\nIt is good coding practice to put a basic header on your script.  \n\nGo to the text editor and type `#`.  Any line in an R script that starts with `#` is a comment and is not executable code. Lines starting with `#` will have a unique color.\n\nI usually add:  \n\n* Name of project  \n* Author(s) of project   \n* Month and Year created  \n* Month and Year last modified  \n\n#### Install and load packages\n\nType the following code into the text editor. This will download and install the `tidyverse` package onto your machine. Note that installing packages requires the package name in quotes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages('ggplot2')\n```\n:::\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\nPackages only need to be installed once.  \n:::\n\nOnce that has completed, you will need to load the library using the `library()` function. In this call, the package name does not need to be quoted. Every time you open a session where you want to use a package, you need to run this code to load the package.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\n\n\n\nThe current libraries loaded can be founded in the file manager panel under the `Packages` tab.\n\n### Step 2 - Acquire and/or Load Data\n\nIn this case we're going go to do **SUPER EZ** mode. Acquiring and loading data has lots of detail oriented stuff, that we're going to skip today to get to the fun stuff.  We'll jump into acquiring data and loading data on Friday.\n\nThe `mpg` dataset is an example dataset included in the tidyverse package. No loading required.\n\nWe can look at the first ten rows of the dataset by typing `mpg` and running that line of code.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   <chr>        <chr>      <dbl> <int> <int> <chr> <chr> <int> <int> <chr> <chr>\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n```\n\n\n:::\n:::\n\n\n\n\nThere are some key categorical variables (manufacturer, model, trans, cyl, class, year, drv) and others that are continuous variables (cty, hwy). As you may be able to guess, this data shows automobile average fuel efficiency in units of miles per gallon. We will using this dataset to showcase the grammar of graphical visualization in R.\n\n### Step 3. Tidy the Data \n\nThis dataset is already reasonably tidy and so this step is not necessary for this example dataset. No munging is required.\n\n### Step 4. Visualize the Data \n\nThe package `ggplot` is the most common graphics package within the `tidyverse` framework. It is extremely versatile, but requires an understanding of the grammar of graphics. `ggplot` is loaded as part of the `tidyverse` package.\n\n#### Choose the visualization type\n\nWe'll be exploring point, line, and smoothed visualization types - `geom_point`, `geom_line`, 'geom_smooth`. In point plots, the individual data are shown as points.  In line plots, individual points are connected by lines.  In a smoothed plot, the points are usually shown with a curve attempting to fit the data to a model.\n\nThere are many more types of visualizations (text, histogram, box, bar, heatmaps, density, jitter, polygons, maps, quantiles, rasters, and violins) available, and we'll explore the grammar for interesting ones in future classes. \n\n#### Choose the visualization function\n\n* `ggplot()`\n  + `geom_point()`\n  + `geom_line()`\n  + `geom_smooth()`\n\nWe'll apply `ggplot()` for every visualization for now, and add at least one `geom` function.  We will then combine them to make fancier visualizations with overlays.\n\n#### Write the code to do a _basic_ visualization\n\nCoding in the R tidyverse is a lot like writing a sentence, just in a foreign language that puts things in an order that may not be familiar.\n\n* Add a verb or two for an action - usually this is the function.\n* Add an object to apply the action to - this is usually the dataframe, but can be a list or another type of data object.\n* Add adjectives and adverbs to modify the action or the object\n\n@fig-basic shows a very basic visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![Basic visualization](coding1_files/figure-html/fig-basic-1.png){#fig-basic width=672}\n:::\n:::\n\n\n\n\nThis is a basic point plot.  The x-axis shows engine displacement (Liters) for gasoline vehicles, and the y-axis shows highway driving fuel efficiency in miles per gallon.\n\nThree functions were used.  \n\n* `ggplot()` - make a figure using `mpg` as the dataset  \n* `geom_point()` - shows the data as points  \n* `aes()` - aes is an abbreviation for _aesthetics_; map these variables for display  \n\nIn the abstract, a code template for a basic graph is:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n```\n:::\n\n\n\n\n@fig-line shows a basic line plot using `geom_line` instead of points. It is a visual abomination for this dataset.  We'll show why below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) +\n  geom_line(aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![Basic line visualization](coding1_files/figure-html/fig-line-1.png){#fig-line width=672}\n:::\n:::\n\n\n\n\n@fig-smooth shows a smoothed line fit with `geom_smooth`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) +\n  geom_smooth(aes(x = displ, y = hwy))\n```\n\n::: {.cell-output-display}\n![Basic smooth visualization](coding1_files/figure-html/fig-smooth-1.png){#fig-smooth width=672}\n:::\n:::\n\n\n\n\n\n#### Noodle Zone\n\n\n\n\n::: {.cell}\n```{webr}\nwebr::install('ggplot2')\nlibrary('ggplot2')\n```\n:::\n\n::: {.cell}\n```{webr}\nggplot(data = mpg) +\n  geom_smooth(aes(x = displ, y = hwy))\n\n```\n:::\n\n\n\n\n#### Improve the Visualization\n\nThe basic visualization is in need of some improvement. First, let's explore how the dataset looks by adding the aesthetics of `color`, then `shape`.\n\n@fig-color shows the `geom_point()` plot with vehicle class in different colors. We do this by defining the category `color = class` within the `aes()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy, color = class))\n```\n\n::: {.cell-output-display}\n![Basic color visualization](coding1_files/figure-html/fig-color-1.png){#fig-color width=672}\n:::\n:::\n\n\n\nInteresting!  The _2seater_ vehicle class gets better fuel efficiency then the SUV and pickups with similar displacement - likely because they are smaller. I also see that the _subcompact_ and _compact_ vehicle classes have the smallest engine displacement which is correlated with better fuel efficiency.\n\n@fig-shape uses a `shape` aesthetic instead of `color`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy, shape = class))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The shape palette can deal with a maximum of 6 discrete values because more\nthan 6 becomes difficult to discriminate\nℹ you have requested 7 values. Consider specifying shapes manually if you need\n  that many have them.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 62 rows containing missing values or values outside the scale range\n(`geom_point()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Basic shape visualization](coding1_files/figure-html/fig-shape-1.png){#fig-shape width=672}\n:::\n:::\n\n\n\n\nNotice anything missing?  Our SUV class is gone because ggplot defaults to only allowing six individual shapes at a time. We can override this default.\n\nThe last new thing I want to show is a `facet_wrap()` which will make this visualization much easier to interpret on a class basis. @fig-facet shows how this works on our basic visualization by adding a line to our basic visualization.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy)) +\n  facet_wrap(~class)\n```\n\n::: {.cell-output-display}\n![Basic color visualization](coding1_files/figure-html/fig-facet-1.png){#fig-facet width=672}\n:::\n:::\n\n\n\nThis helps us to better identify the individual classes of vehicles and understand the range of data available for each type of automobile.\n\n### Putting It Together\n\nThe previous section shows examples for individual changes to our basic visualization.  In this section, I'll show you how easy it is to combine those lines.\n\n#### Example 1: Points and smooth\n\n@fig-smoint shows a `geom_point` and `geom_smooth` overlaid on each other. We've also moved the `aes` function into the ggplot but could have put in both the `geom_point` and `geom_smooth` instead.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![Basic point and smooth visualization](coding1_files/figure-html/fig-smoint-1.png){#fig-smoint width=672}\n:::\n:::\n\n\n\n\n#### Example 2: Points, color, and smooth\n\n@fig-colsmoint shows a `geom_point` and `geom_smooth` overlaid on each other but we've added the `color` for vehicle class as well. Unfortunately, the standard error on the smooth function is detracting from the graphic.  @fig-noSEsmooth removes that by specifying `se = FALSE` to the geom_smooth function and it makes the visualization much cleaner.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output-display}\n![Basic point, color, and smooth visualization](coding1_files/figure-html/fig-colsmoint-1.png){#fig-colsmoint width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  geom_smooth(se = FALSE)\n```\n\n::: {.cell-output-display}\n![Basic point, color, and smooth visualization with standard error removed](coding1_files/figure-html/fig-noSEsmooth-1.png){#fig-noSEsmooth width=672}\n:::\n:::\n\n\n\n\n#### Example 3: Points, color, smooth, and facet\n\nThis last example will put it all together.\n\n@fig-facColsmooth shows a `geom_point`, `geom_smooth`, and `facet_wrap` overlaid on each other with the `color` for vehicle class as well. This figure combines most of what we've explored today in one figure. But we don't need that legend if we already define each class separately!\n\nIn @fig-noLegend I remove the legend to make a final figure. This involves a function called `theme()` which specifies a lot of the meta components of a figure like fonts, legends, and the default look and feel of the figure. Here, I added a line of code that specifies `theme(legend.position = 'none')` to remove that redundant legend. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  geom_smooth(se = FALSE)+\n  facet_wrap(~class)\n```\n\n::: {.cell-output-display}\n![Point, smooth, facet, and color visualization with standard error removed](coding1_files/figure-html/fig-facColsmooth-1.png){#fig-facColsmooth width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  geom_smooth(se = FALSE)+\n  facet_wrap(~class) + \n  theme(legend.position = 'none')\n```\n\n::: {.cell-output-display}\n![Point, smooth, facet, and color visualization with Legend and standard error removed](coding1_files/figure-html/fig-noLegend-1.png){#fig-noLegend width=672}\n:::\n:::\n\n\n\n\n### In-Class Exercises\n\n1. Create a point visualization with _cty_ on the x-axis and _hwy_ on the y-axis.  \n2. Fit that relationship by adding a `geom_smooth()`\n3. Improve that visualization by adding _class_ as a color class\n4. Improve that visualization by adding a `facet_wrap` by a categorical variable of your choice\n\n@fig-Cylfacet shows the city-highway fuel efficiency relationship colored by _class_ and `faceted` by _cyl_ with the ugly gray background removed using `theme_bw()`.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Point, smooth, facet, and color visualization example](coding1_files/figure-html/fig-Cylfacet-1.png){#fig-Cylfacet width=672}\n:::\n:::\n\n\n\n\n#### Noodle Zone 2\n\n\n\n\n::: {.cell}\n```{webr}\nggplot(data = mpg, aes(x = cty, y = hwy, color = class)) +\n  geom_point() \n```\n:::\n",
    "supporting": [
      "coding1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}