# Roads, Rails, Tracts, Buffers, and Spatial joins {#sec-roads_rails_tracts_buffers}

::: {.callout-note appearance="simple"}
Today we will be focusing on the practice of fancy geospatial data analysis and visualization.
:::

## Libraries

Load the libaries first!

```{r}
#| label: load libraries
#| echo: true

library(tidyverse)
library(sf)
library(leaflet)
library(tigris)

```

## `tigris` and its `rails()` function.

Multiple projects may need to have rail data. 

Let's import some California rail data for visualization.

`tigris` has the `rails()` function which is very similar to the [`roads()` function](https://radicalresearch.llc/EA078_Fall2024/roads.html#tigris-function-for-scraping-road-data.) from last week's class.

Unfortunately, it cannot be geographically pulled for specific areas, it only includes the whole country.  

```{r}
#| label: import National rail data
#| echo: true

rails <- rails(progress_bar = FALSE, year = 2023) 

head(rails)
  
```

It is in the coordinate reference system of [NAD83](https://www.ngs.noaa.gov/datums/horizontal/north-american-datum-1983.shtml) and includes the full dataset for the US.  You can map this in leaflet, but it is a big dataset and we want to focus on our spatial domains for projects, just the Inland Empire counties of Riverside and San Bernardino.

Thankfully, we learned how to apply a spatial filter using [`st_filter()`](https://radicalresearch.llc/EA078_Fall2024/joins.html#spatial-joins) last week as well.  


```{r}
#| label: import SBD and RIV counties
#| echo: true 

IE_counties <- counties(state = 'CA', cb = T, progress_bar = FALSE) |>  #pull for California, lower detail level, year = 2022 ) 
  filter(NAME %in% c('San Bernardino', 'Riverside'))

head(IE_counties)
```

And now we have the two datasets we need to trim the rail data down to the local scale.  Apply `st_filter()` to get an IE_rails dataset.

```{r}
#| label: spatially filter rail to IE counties
#| echo: true 

IE_rail <- st_filter(rails, IE_counties) 

head(IE_rail) # down to only 826 records from 120k

rm(ls = rails) # this removes the big rails dataset to free up memory, you can always reimport it.

```

@fig-IE_rail shows the rail dataset for the Inland Empire. This is our basic map.  

```{r}
#| label: fig-IE_rail
#| echo: true
#| fig-cap: Inland Empire rail links from tigris

IE_rail |> 
  st_transform(crs =4326) |> # coordinate reference transformation to WGS84 for visualization 
  leaflet() |> 
  addTiles() |> 
  setView(lat = 34, lng = -117.3, zoom = 10) |> 
  addPolylines(color = 'black',
               weight = 4,
               dashArray = '2,5') |> 
  addPolylines(data = IE_counties,
               color = 'blue',
               weight =3)

```

::: {.callout-note appearance="alert"}
Adding fancy overlay options incoming!
:::

@fig-LayersOptions shows the rail layer and a rail tile layer, and also displays the `addLayersControl()` function for allowing layers to be toggled on-off by the user.  

```{r}
#| label: fig-LayersOptions
#| echo: true
#| fig-cap: Inland Empire rail links with overlays!

IE_rail2 <- IE_rail |> 
    st_transform(crs = 4326)

leaflet() |> 
  addTiles() |> #define group names
  addProviderTiles(providers$OpenRailwayMap, group = 'RailTile') |> #this is a standard provider tile
  addLayersControl( #This provides a toggle option for layers 
    baseGroups = c('Basemap', 'RailTile'), #this is the names for tiles
    overlayGroups = c('RailTigris', 'County') #this is names for datalayers - polylines, polygons, markers, etc.
   )  |>  
  setView(lat = 34, lng = -117.3, zoom = 10) |> 
  addPolylines(data = IE_rail2,
               color = 'black',
               weight = 4,
               dashArray = '2,5',
               group = 'RailTigris') |> 
  addPolylines(data = IE_counties,
               color = 'blue',
               weight =3,
               group = 'County')

```

## `st_buffer()`

The next function I want to demonstrate is the `st_buffer()` function.  This allows you to create a user-defined distance from a geospatial object to help identify nearby features.

Let's show an example using the IE_rail dataset. 

```{r}
#| label: import California Rail network data
#| echo: true

IERailBuffer <- IE_rail |> 
  st_buffer(dist = 500, nQuadSegs = 8) |> # units are in the base units of the projection - could be meters or lat-lng degrees.  NAD83 is a meter based projection, WGS84 is lat-lng
  st_simplify(dTolerance = 150) |> #this smooths some wiggles and makes the data smaller bigger dTolerance would mean less wiggles
  st_transform(crs = 4326)

head(IERailBuffer) 

```

Note that IE_rail was a LINESTRING whereas IERailBuffer is now a POLYGON type.  

@fig-Rail2 shows a simple version of how it changed the data.

```{r}
#| label: fig-Rail2
#| echo: true
#| fig-cap: IE Rail with a 500m buffer 

leaflet() |> 
  addTiles() |> 
  setView(lat = 34, lng = -117.3, zoom = 10) |> 
  addPolygons(data = IERailBuffer,
               color = 'black',
               weight = 2,
               fillOpacity = 0.2,
               label = ~FULLNAME)
```

### Analysis Relevance

What projects might looking at a buffered region make sense?  

1. Emissions - pollution from nearby sources - buffer around Fontana/Bloomington to show adjacent sources outside of the jurisdictional boundaries
2. Socioeconomic status - buffers around tracts for adjacent warehouses (or vice versa)
3. Road widening - buffers around road widening for nearby warehouses
